<%= render :partial => "/home/navbar" %>
<div class = "container">
  <div class = "card">

    <div class = "container">

      <div class = "section">
        <div class="row">
          <div class = "col s12 m12 l12">
            <span class = "card-title"><h2 class = "teal-text text-darken-4" ><%= @one_review.detail_address %></h2></span>
          </div>
          <div class = "divider"></div>
          <a class="col s6 m3 l3 black-text center waves-effect waves-teal btn-flat" >기본 계약 정보</a>
          <a class="col s6 m3 l3 teal-text center waves-effect waves-teal btn-flat" href="/review/create">리뷰 쓰기</a>
          <a class="col s6 m3 l3 teal-text center waves-effect waves-teal btn-flat" href="/review/review_list/<%= @one_review.parcel_address %>">리뷰 목록</a>
          <a class="col s6 m3 l3 teal-text center waves-effect waves-teal btn-flat" href="/review/review_board/<%= @one_review.parcel_address %>">커뮤니티</a>

        </div>
        <div class = "row">
          <div class = "col s12 m12 l12">
            <h5 style = "font-weight: bold">기본/평균 계약 정보</h5>
          </div>
          <div class = "col s12 m12 l12 card-panel z-depth-0" style ="margin:0px; padding-top:2px; padding-bottom:2px">
            <label for ="address" class = "teal-text text-darken-3" style = "font-size: 1.1rem;">주소</label>
            <h6 id = "address" ><%= @one_review.total_address %></h6>
          </div>
          <div class = "col s12 m12 l6 card-panel z-depth-0" style ="margin:0px; padding-top:2px; padding-bottom:2px">
            <label for ="price" class = "teal-text text-darken-3" style = "font-size: 1.1rem;">보증금</label>
            <h6 id = "price" >평균 : <%= @price %> 만원</h6>
          </div>
          <div class = "col s12 m12 l6 card-panel z-depth-0" style ="margin:0px; padding-top:2px; padding-bottom:2px">
            <label for ="month" class = "teal-text text-darken-3" style = "font-size: 1.1rem;">월세</label>
            <h6 id = "month" >평균 : <%= @month %> 만원</h6>
          </div>

        </div>
      </div>

      <div class = "divider"></div>
      <div class = "section">
        <div class = "row">
          <div class = "col s12 m12 l12">
            <h5 style = "font-weight: bold">위치</h5>
          </div>
          <div class= "col s12 m12 l12">
            <div id="map" style="width: 100%; height: 400px;"></div>
          </div>
        </div>
      </div>

      <div class = "divider"></div>
      <div class = "section">
        <div class= "row">
          <div class= "col s12 m12 l12">
            <div id="roadview" style="width:100%;height:400px;"></div>
          </div>
        </div>
      </div>


    </div>
  </div>
</div>
<%= render :partial => "/home/footer" %>

<script>
  var mapContainer = document.getElementById('map'), // 지도를 표시할 div
      mapCenter = new daum.maps.LatLng("<%= @one_review.marker1 %>", "<%= @one_review.marker2 %>"), // 지도의 중심 좌표
      mapOption = {
          center: mapCenter, // 지도의 중심 좌표
          level: 4 // 지도의 확대 레벨
      };

    // 지도를 표시할 div와  지도 옵션으로  지도를 생성합니다
    var map = new daum.maps.Map(mapContainer, mapOption);

    var imageSrc = "<%= image_path "map_marker.png" %>";

    var imageSize = new daum.maps.Size(22, 40);

    // 마커 이미지를 생성합니다
    var markerImage = new daum.maps.MarkerImage(imageSrc, imageSize);

    // 지도에 올릴 마커를 생성합니다.
    var mMarker = new daum.maps.Marker({
      position: mapCenter, // 지도의 중심좌표에 올립니다.
      map: map, // 생성하면서 지도에 올립니다.
      image : markerImage // 마커 이미지

    });



    // 지도 확대 축소를 제어할 수 있는  줌 컨트롤을 생성합니다
    var zoomControl = new daum.maps.ZoomControl();
    map.addControl(zoomControl, daum.maps.ControlPosition.RIGHT);

    function setDraggable(draggable) {
        // 마우스 드래그로 지도 이동 가능여부를 설정합니다
        map.setDraggable(draggable);
    }
    map.setDraggable(true);

    // 지도에 올릴 장소명 인포윈도우 입니다.
    var mLabel = new daum.maps.InfoWindow({
      position: mapCenter, // 지도의 중심좌표에 올립니다.
      content: '<div class="center" style="width:150px;text-align:center;padding:6px 0;"><%= @one_review.detail_address %></div>' // 인포윈도우 내부에 들어갈 컨텐츠 입니다.
    });
    mLabel.open(map, mMarker); // 지도에 올리면서, 두번째 인자로 들어간 마커 위에 올라가도록 설정합니다.
    var rvContainer = document.getElementById('roadview'); // 로드뷰를 표시할 div
    var rv = new daum.maps.Roadview(rvContainer); // 로드뷰 객체 생성
    var rc = new daum.maps.RoadviewClient(); // 좌표를 통한 로드뷰의 panoid를 추출하기 위한 로드뷰 help객체 생성
    var rvResetValue = {} //로드뷰의 초기화 값을 저장할 변수
    rc.getNearestPanoId(mapCenter, 50, function(panoId) {
      rv.setPanoId(panoId, mapCenter);//좌표에 근접한 panoId를 통해 로드뷰를 실행합니다.
      rvResetValue.panoId = panoId;
    });

    // 로드뷰 초기화 이벤트
    daum.maps.event.addListener(rv, 'init', function() {

      // 로드뷰에 올릴 마커를 생성합니다.
      var rMarker = new daum.maps.Marker({
          position: mapCenter,
          map: rv,
          image : markerImage // 마커 이미지
 //map 대신 rv(로드뷰 객체)로 설정하면 로드뷰에 올라갑니다.
      });

      // 로드뷰에 올릴 장소명 인포윈도우를 생성합니다.
      var rLabel = new daum.maps.InfoWindow({
          position: mapCenter,
          content: '<div class="center" style="width:150px;text-align:center;padding:6px 0;"><%= @one_review.detail_address %></div>'
      });
      rLabel.open(rv, rMarker);

      // 로드뷰 마커가 중앙에 오도록 로드뷰의 viewpoint 조정 합니다.
      var projection = rv.getProjection(); // viewpoint(화면좌표)값을 추출할 수 있는 projection 객체를 가져옵니다.

      // 마커의 position과 altitude값을 통해 viewpoint값(화면좌표)를 추출합니다.
      var viewpoint = projection.viewpointFromCoords(rMarker.getPosition(), rMarker.getAltitude());
      rv.setViewpoint(viewpoint); //로드뷰에 뷰포인트를 설정합니다.

      //각 뷰포인트 값을 초기화를 위해 저장해 놓습니다.
      rvResetValue.pan = viewpoint.pan;
      rvResetValue.tilt = viewpoint.tilt;
      rvResetValue.zoom = viewpoint.zoom;
    });

    //지도 이동 이벤트 핸들러
    function moveDaumMap(self){

      var center = map.getCenter(),
          lat = center.getLat(),
          lng = center.getLng();

      self.href = 'http://map.daum.net/link/map/' + encodeURIComponent('대전광역시유성구') + ',' + lat + ',' + lng; //Daum 지도로 보내는 링크
    }

    //지도 초기화 이벤트 핸들러
    function resetDaumMap(){
      map.setCenter(mapCenter); //지도를 초기화 했던 값으로 다시 셋팅합니다.
      map.setLevel(mapOption.level);
    }

    //로드뷰 이동 이벤트 핸들러
    function moveDaumRoadview(self){
      var panoId = rv.getPanoId(); //현 로드뷰의 panoId값을 가져옵니다.
      var viewpoint = rv.getViewpoint(); //현 로드뷰의 viewpoint(pan,tilt,zoom)값을 가져옵니다.
      self.href = 'http://map.daum.net/?panoid='+panoId+'&pan='+viewpoint.pan+'&tilt='+viewpoint.tilt+'&zoom='+viewpoint.zoom; //Daum 지도 로드뷰로 보내는 링크        }
    }

    //로드뷰 초기화 이벤트 핸들러
    function resetRoadview(){
      //초기화를 위해 저장해둔 변수를 통해 로드뷰를 초기상태로 돌립니다.
      rv.setViewpoint({
          pan: rvResetValue.pan, tilt: rvResetValue.tilt, zoom: rvResetValue.zoom
      });
      rv.setPanoId(rvResetValue.panoId);
    }

</script>
